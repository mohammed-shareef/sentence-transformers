import json
import logging
import azure.functions as func
from sentence_transformers import SentenceTransformer

app = func.FunctionApp()

# Load the efficient model for embeddings
model = SentenceTransformer('paraphrase-MiniLM-L6-v2')

@app.route(route=".well-known/ready", auth_level=func.AuthLevel.ANONYMOUS)  # Define the healthcheck route
def ready(req: func.HttpRequest) -> func.HttpResponse:
    # Log the health check request
    logging.info("Processing health check request at '/.well-known/ready'.")

    # Return a simple health status response
    return func.HttpResponse(
        body="Service is ready and reachable.",
        status_code=200,
        mimetype="text/plain"
    )
    
@app.route(route="v1/vectorize", auth_level=func.AuthLevel.ANONYMOUS)  # Set the rou
def main(req: func.HttpRequest) -> func.HttpResponse:
    '''HttpTrigger to convert the received JSON to an embedding'''

    try:
        data = req.get_json()
        texts = data.get("texts", [])

        if isinstance(texts, str):  # Convert single string to a list
            texts = [texts]

        elif not texts or not isinstance(texts, list):  # Handle invalid input
            return func.HttpResponse(
                json.dumps({"error": "Invalid input format. 'texts' must be a list or a single string."}),
                status_code=400,
                mimetype="application/json"
            )

        # Generate embeddings using the SentenceTransformer model
        embeddings = model.encode(texts)

        # Return embeddings as a JSON response
        return func.HttpResponse(
            json.dumps({"embeddings": embeddings.tolist()}),  # Serialize the dict to JSON
            status_code=200,
            mimetype="application/json"
        )
    except Exception as e:
        logging.error("Error occurred: %s",str(e))
        return func.HttpResponse(
            json.dumps({"error": "An error occurred while processing the request."}),
            status_code=500,
            mimetype="application/json"
        )
